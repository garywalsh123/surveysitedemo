// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveySite.Database;

#nullable disable

namespace SurveySite.Database.Migrations
{
    [DbContext(typeof(SurveySiteContext))]
    [Migration("20230731164744_initial-database-setup")]
    partial class initialdatabasesetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuestionQuestionBank", b =>
                {
                    b.Property<Guid>("QuestionBanksQuestionBankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionsQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionBanksQuestionBankId", "QuestionsQuestionId");

                    b.HasIndex("QuestionsQuestionId");

                    b.ToTable("QuestionQuestionBank");
                });

            modelBuilder.Entity("SurveySite.Database.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("bit");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("SurveySite.Database.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ActiveInd")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("SurveySite.Database.QuestionBank", b =>
                {
                    b.Property<Guid>("QuestionBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionBankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionBankId");

                    b.ToTable("QuestionBank");
                });

            modelBuilder.Entity("SurveySite.Database.Survey", b =>
                {
                    b.Property<Guid>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionBankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SurveyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SurveyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SurveyId");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("SurveySite.Database.SurveyAnswer", b =>
                {
                    b.Property<Guid>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SurveyAnswerId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyAnswer");
                });

            modelBuilder.Entity("QuestionQuestionBank", b =>
                {
                    b.HasOne("SurveySite.Database.QuestionBank", null)
                        .WithMany()
                        .HasForeignKey("QuestionBanksQuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveySite.Database.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveySite.Database.Answer", b =>
                {
                    b.HasOne("SurveySite.Database.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveySite.Database.Survey", b =>
                {
                    b.HasOne("SurveySite.Database.QuestionBank", "QuestionBank")
                        .WithMany()
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("SurveySite.Database.SurveyAnswer", b =>
                {
                    b.HasOne("SurveySite.Database.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveySite.Database.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveySite.Database.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
